#= generated by Comonicon =#
function command_main(ARGS::Vector{String} = ARGS)
    ccall(:jl_exit_on_sigint, Cvoid, (Cint,), 0)
    var"##help#320" = if isempty(ARGS)
            1
        else
            -1
        end
    var"##version#321" = -1
    for i = 1:length(ARGS)
        x = ARGS[i]
        if x == "--help" || x == "-h"
            var"##help#320" = i
            break
        end
        if x == "--version" || x == "-V"
            var"##version#321" = i
            break
        end
    end
    if var"##help#320" >= 1
        print("\n  \e[94m\e[1mexp_gmm\e[22m\e[39m\n\n  \n\n\e[0m\e[1mUsage\e[22m\n\n  \e[94m\e[1mexp_gmm\e[22m\e[39m\e[96m [options]\e[39m \e[95m<refreshment>\e[39m \e[95m<TS>\e[39m \e[95m<epsilon::Float64>\e[39m \e[95m<L::Int64>\e[39m\n\n\e[0m\e[1mArgs\e[22m\n\n  \e[95m<L::Int64>\e[39m\n\n  \e[95m<TS>\e[39m\n\n  \e[95m<epsilon::Float64>\e[39m\n\n  \e[95m<refreshment>\e[39m\n\n\e[0m\e[1mOptions\e[22m\n\n  \e[96m--gamma\e[39m \e[95m<arg::Float64>\e[39m          . default is \e[36m:(1 / 20)\e[39m.\n\n  \e[96m--n-mc\e[39m \e[95m<arg::Int64>\e[39m             . default is \e[36m500\e[39m.\n\n  \e[96m--n-samples-max\e[39m \e[95m<arg::Int64>\e[39m    . default is \e[36m100\e[39m.\n\n  \e[96m--sigma\e[39m \e[95m<arg::Float64>\e[39m          . default is \e[36m0.001\e[39m.\n\n\e[0m\e[1mFlags\e[22m\n\n  \e[96m-h, --help\e[39m                      print this help message\n\n  \e[96m-V, --version\e[39m                   print version information\n\n\n")
        return 0
    end
    if var"##version#321" >= 1
        println("\e[94m\e[1mexp_gmm\e[22m\e[39m")
        return 0
    end
    var"##parameters#322" = []
    var"##index#325" = 1
    while !(isempty(ARGS)) && 1 <= var"##index#325" <= length(ARGS)
        var"##arg#324" = ARGS[var"##index#325"]
        if startswith(var"##arg#324", "-")
            var"##m#326" = match(r"^--n-mc$", var"##arg#324")
            if var"##m#326" === nothing
                var"##m#327" = match(r"^--n-mc=(.*)", var"##arg#324")
                if var"##m#327" === nothing
                    var"##m#328" = match(r"^--n-samples-max$", var"##arg#324")
                    if var"##m#328" === nothing
                        var"##m#329" = match(r"^--n-samples-max=(.*)", var"##arg#324")
                        if var"##m#329" === nothing
                            var"##m#330" = match(r"^--gamma$", var"##arg#324")
                            if var"##m#330" === nothing
                                var"##m#331" = match(r"^--gamma=(.*)", var"##arg#324")
                                if var"##m#331" === nothing
                                    var"##m#332" = match(r"^--sigma$", var"##arg#324")
                                    if var"##m#332" === nothing
                                        var"##m#333" = match(r"^--sigma=(.*)", var"##arg#324")
                                        if var"##m#333" === nothing
                                            printstyled("Error: unknown option: $(var"##arg#324"), use -h or --help to check more detailed help info"; color = :red, bold = true)
                                            print("\n  \e[94m\e[1mexp_gmm\e[22m\e[39m\e[96m [options]\e[39m \e[95m<refreshment>\e[39m \e[95m<TS>\e[39m \e[95m<epsilon::Float64>\e[39m \e[95m<L::Int64>\e[39m\n\n  \n\n\e[0m\e[1mArgs\e[22m\n\n  \e[95m<L::Int64>\e[39m\n\n  \e[95m<TS>\e[39m\n\n  \e[95m<epsilon::Float64>\e[39m\n\n  \e[95m<refreshment>\e[39m\n\n\e[0m\e[1mOptions\e[22m\n\n  \e[96m--gamma\e[39m \e[95m<arg::Float64>\e[39m          . default is \e[36m:(1 / 20)\e[39m.\n\n  \e[96m--n-mc\e[39m \e[95m<arg::Int64>\e[39m             . default is \e[36m500\e[39m.\n\n  \e[96m--n-samples-max\e[39m \e[95m<arg::Int64>\e[39m    . default is \e[36m100\e[39m.\n\n  \e[96m--sigma\e[39m \e[95m<arg::Float64>\e[39m          . default is \e[36m0.001\e[39m.\n\n\e[0m\e[1mFlags\e[22m\n\n  \e[96m-h, --help\e[39m                      print this help message\n\n\n")
                                            return 1
                                        else
                                            push!(var"##parameters#322", :sigma => convert(Float64, Meta.parse(String(var"##m#333"[1]))))
                                            deleteat!(ARGS, var"##index#325")
                                        end
                                    else
                                        var"##index#325" < length(ARGS) || error("expect an argument")
                                        push!(var"##parameters#322", :sigma => convert(Float64, Meta.parse(ARGS[var"##index#325" + 1])))
                                        deleteat!(ARGS, (var"##index#325", var"##index#325" + 1))
                                        var"##index#325" = var"##index#325" - 1
                                    end
                                else
                                    push!(var"##parameters#322", :gamma => convert(Float64, Meta.parse(String(var"##m#331"[1]))))
                                    deleteat!(ARGS, var"##index#325")
                                end
                            else
                                var"##index#325" < length(ARGS) || error("expect an argument")
                                push!(var"##parameters#322", :gamma => convert(Float64, Meta.parse(ARGS[var"##index#325" + 1])))
                                deleteat!(ARGS, (var"##index#325", var"##index#325" + 1))
                                var"##index#325" = var"##index#325" - 1
                            end
                        else
                            push!(var"##parameters#322", :n_samples_max => convert(Int64, Meta.parse(String(var"##m#329"[1]))))
                            deleteat!(ARGS, var"##index#325")
                        end
                    else
                        var"##index#325" < length(ARGS) || error("expect an argument")
                        push!(var"##parameters#322", :n_samples_max => convert(Int64, Meta.parse(ARGS[var"##index#325" + 1])))
                        deleteat!(ARGS, (var"##index#325", var"##index#325" + 1))
                        var"##index#325" = var"##index#325" - 1
                    end
                else
                    push!(var"##parameters#322", :n_mc => convert(Int64, Meta.parse(String(var"##m#327"[1]))))
                    deleteat!(ARGS, var"##index#325")
                end
            else
                var"##index#325" < length(ARGS) || error("expect an argument")
                push!(var"##parameters#322", :n_mc => convert(Int64, Meta.parse(ARGS[var"##index#325" + 1])))
                deleteat!(ARGS, (var"##index#325", var"##index#325" + 1))
                var"##index#325" = var"##index#325" - 1
            end
        else
            var"##index#325" += 1
        end
    end
    var"##n_args#323" = length(ARGS) - 0
    if var"##n_args#323" < 4
        printstyled("Error: command exp_gmm expect at least 4 arguments, got $(var"##n_args#323"), use -h or --help to check more detailed help info"; color = :red, bold = true)
        print("\n  \e[94m\e[1mexp_gmm\e[22m\e[39m\e[96m [options]\e[39m \e[95m<refreshment>\e[39m \e[95m<TS>\e[39m \e[95m<epsilon::Float64>\e[39m \e[95m<L::Int64>\e[39m\n\n  \n\n\e[0m\e[1mArgs\e[22m\n\n  \e[95m<L::Int64>\e[39m\n\n  \e[95m<TS>\e[39m\n\n  \e[95m<epsilon::Float64>\e[39m\n\n  \e[95m<refreshment>\e[39m\n\n\e[0m\e[1mOptions\e[22m\n\n  \e[96m--gamma\e[39m \e[95m<arg::Float64>\e[39m          . default is \e[36m:(1 / 20)\e[39m.\n\n  \e[96m--n-mc\e[39m \e[95m<arg::Int64>\e[39m             . default is \e[36m500\e[39m.\n\n  \e[96m--n-samples-max\e[39m \e[95m<arg::Int64>\e[39m    . default is \e[36m100\e[39m.\n\n  \e[96m--sigma\e[39m \e[95m<arg::Float64>\e[39m          . default is \e[36m0.001\e[39m.\n\n\e[0m\e[1mFlags\e[22m\n\n  \e[96m-h, --help\e[39m                      print this help message\n\n\n")
        return 1
    end
    if var"##n_args#323" > 4
        printstyled("Error: command exp_gmm expect at most 4 arguments, got $(var"##n_args#323"), use -h or --help to check more detailed help info"; color = :red, bold = true)
        print("\n  \e[94m\e[1mexp_gmm\e[22m\e[39m\e[96m [options]\e[39m \e[95m<refreshment>\e[39m \e[95m<TS>\e[39m \e[95m<epsilon::Float64>\e[39m \e[95m<L::Int64>\e[39m\n\n  \n\n\e[0m\e[1mArgs\e[22m\n\n  \e[95m<L::Int64>\e[39m\n\n  \e[95m<TS>\e[39m\n\n  \e[95m<epsilon::Float64>\e[39m\n\n  \e[95m<refreshment>\e[39m\n\n\e[0m\e[1mOptions\e[22m\n\n  \e[96m--gamma\e[39m \e[95m<arg::Float64>\e[39m          . default is \e[36m:(1 / 20)\e[39m.\n\n  \e[96m--n-mc\e[39m \e[95m<arg::Int64>\e[39m             . default is \e[36m500\e[39m.\n\n  \e[96m--n-samples-max\e[39m \e[95m<arg::Int64>\e[39m    . default is \e[36m100\e[39m.\n\n  \e[96m--sigma\e[39m \e[95m<arg::Float64>\e[39m          . default is \e[36m0.001\e[39m.\n\n\e[0m\e[1mFlags\e[22m\n\n  \e[96m-h, --help\e[39m                      print this help message\n\n\n")
        return 1
    end
    (exp_gmm)(ARGS[1], ARGS[2], convert(Float64, Meta.parse(ARGS[3])), convert(Int64, Meta.parse(ARGS[4])); var"##parameters#322"...)
    return 0
end
command_main()
